[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "about",
    "section": "",
    "text": "トップに戻る"
  },
  {
    "objectID": "contents/list_science.html",
    "href": "contents/list_science.html",
    "title": "Cacical",
    "section": "",
    "text": "一致なし\n トップに戻る"
  },
  {
    "objectID": "contents/list_memo.html",
    "href": "contents/list_memo.html",
    "title": "Cacical",
    "section": "",
    "text": "ggplot2を用いた棒グラフの作成\n\n\nエラーバーや有意差の有無を表示した棒グラフを作成します。検定やデータの整形も同時に行います。\n\n\n\n\n\n2025/08/08\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2グラフの背景透過\n\n\nggplot2で作成したグラフの背景を、themeをいじることで透過させます。\n\n\n\n\n\n2025/08/12\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2テーマの自作\n\n\nggplot2で作成するグラフのテーマを自作する。（執筆途中）\n\n\n\n\n\n2025/08/10\n\n\n\n\n\n一致なし\n トップに戻る"
  },
  {
    "objectID": "contents/society/koureika/koureika.html",
    "href": "contents/society/koureika/koureika.html",
    "title": "高齢者割合マップ",
    "section": "",
    "text": "環境 ggplot2\n都道府県別市町村ごとの65歳以上人口割合\nページ最下部に生成スクリプトを記載しています。\n\n北海道・東北\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n関東\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n北陸\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n中部\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n近畿\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n中国\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n四国\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n九州・沖縄\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n トップに戻る"
  },
  {
    "objectID": "contents/memo/barplot/barplot.html",
    "href": "contents/memo/barplot/barplot.html",
    "title": "ggplot2を用いた棒グラフの作成",
    "section": "",
    "text": "目標\nggplot2を用いて左のグラフを作る。\n\n\n棒グラフ\nエラーバー（標準偏差）\n軸やラベルの編集\nテーマの作成\n\n\n\n\n\n\n\n\nグラフ作成の流れ\n\nデータの整形\n棒グラフの作成\n装飾\n\n\n\n\n1. データの整形\n\n1-1. データの確認・ライブラリのインポート\nR標準のデータセットchickwtsを使って棒グラフを作成します。\nデータセットchickwtsは、与えた餌ごとの鶏の体重のデータで、一列目weightに鶏の体重、二列目feedに餌の種類が記載されています。\n\n# データセットの中身の確認\nhead(chickwts)\n\n  weight      feed\n1    179 horsebean\n2    160 horsebean\n3    136 horsebean\n4    227 horsebean\n5    217 horsebean\n6    168 horsebean\n\n\nまずggplot2を使うために必要なtidyverseパッケージをインポートします。\nexactRankTestsパッケージは後で検定を行うときに使います。（検定を行わない場合は不要）\nggsignifパッケージは有意差をグラフ内に書き込むときに用います。（これも同様に、有意差を書き込まない場合は不要）\n\nlibrary(tidyverse) # ggplot2を使ってグラフを作成するのに必要\nlibrary(exactRankTests)　# 検定を行う際に使用（実施しない場合は不要）\nlibrary(ggsignif) # 有意差をグラフ内に書き込む際に使用\n\n\n\n1-2. 標準偏差データの追加\nデータセットは測定値しか含まれていません。\n棒グラフは平均値と標準偏差の値を用いて作成したいので、データを整形し、平均値と標準偏差をまとめた新しいデータセットchickwts_sum_dataを作成します。\nそのために、与えた餌feedごとにグループ化して、平均feed_meanと標準偏差sdを求めます。\n\nchickwts_sum_data &lt;- chickwts %&gt;%\n  group_by(feed) %&gt;%\n  summarize(weight_mean=mean(weight), sd=sd(weight))\n\n# 作成したデータセットの中身を確認\nhead(chickwts_sum_data)\n\n# A tibble: 6 × 3\n  feed      weight_mean    sd\n  &lt;fct&gt;           &lt;dbl&gt; &lt;dbl&gt;\n1 casein           324.  64.4\n2 horsebean        160.  38.6\n3 linseed          219.  52.2\n4 meatmeal         277.  64.9\n5 soybean          246.  54.1\n6 sunflower        329.  48.8\n\n\nこれでデータセットの準備は整いました。\n次は、作成したデータセットchickwts_sum_dataを用いてggplot2で棒グラフを作ります。\n\n\n\n\n2. 棒グラフの作成\nggplot2でグラフを作成し、bar_plotという変数に書き込んでいきます。\nまず、ggplot(データ, aes(x=x軸に使うデータ, y=y軸に使うデータ))を書き込みます。\n次にggplot2の棒グラフ作成関数であるgeom_bar()を使って棒グラフを作成します。geom_bar()内で指定しているstatは、データの扱い方です。デフォルトだと要素数をカウントしてしまうので、今回のように棒グラフの高さがそのまま入っているデータを扱う際はidentityを指定します。\n\nbar_plot &lt;- ggplot(chickwts_sum_data, aes(x=feed, y=weight_mean)) +\n  geom_bar(stat='identity')\n\nprint(bar_plot)\n\n\n\n\n\n\n\n\n\n\n\n3. 装飾\n\n3-1. エラーバーを付ける\ngeom_errorbarでエラーバーを付けます。yminとymaxはそれぞれ平均から標準偏差を引いた値と足した値を使うことでエラーバーの範囲を指定できます。\n\nbar_plot &lt;- bar_plot +\n  geom_errorbar(\n    aes(ymin = weight_mean - sd, ymax = weight_mean + sd),\n    width = 0.15, # エラーバー先端の幅\n    linewidth = 0.4 # エラーバーの太さ\n    )\n\nprint(bar_plot)\n\n\n\n\n\n\n\n\n\n\n3-2. 軸名を変更する\n\nbar_plot &lt;- bar_plot +\n  labs(\n    title = '飼料種別ニワトリ体重',  # タイトル\n    x = 'ニワトリ飼料',               # x軸タイトル\n    y = '平均体重',                   # y軸タイトル\n  )\n\nprint(bar_plot)\n\n\n\n\n\n\n\n\n\n\n3-3. 検定で有意差を示す\ncaseinとその他の飼料で検定を行います。\n検定にも様々ありますが、今回はウィルコクソンの順位和検定、有意水準0.05で検定します。\n\n\nhorsebeanlinseedmeatmealsoybeansunflower\n\n\n\ntest_casein_horsebean &lt;- wilcox.exact(\n  x = filter(chickwts, feed=='casein')[,1], \n  y = filter(chickwts, feed=='horsebean')[,1], \n  paired = FALSE)\nprint(test_casein_horsebean)\n\n\n    Exact Wilcoxon rank sum test\n\ndata:  filter(chickwts, feed == \"casein\")[, 1] and filter(chickwts, feed == \"horsebean\")[, 1]\nW = 117, p-value = 2.165e-05\nalternative hypothesis: true mu is not equal to 0\n\n\n\n\n\ntest_casein_linseed &lt;- wilcox.exact(\n  x = filter(chickwts, feed=='casein')[,1], \n  y = filter(chickwts, feed=='linseed')[,1], \n  paired = FALSE)\nprint(test_casein_linseed)\n\n\n    Exact Wilcoxon rank sum test\n\ndata:  filter(chickwts, feed == \"casein\")[, 1] and filter(chickwts, feed == \"linseed\")[, 1]\nW = 128.5, p-value = 0.0005325\nalternative hypothesis: true mu is not equal to 0\n\n\n\n\n\ntest_casein_meatmeal &lt;- wilcox.exact(\n  x = filter(chickwts, feed=='casein')[,1], \n  y = filter(chickwts, feed=='meatmeal')[,1], \n  paired = FALSE)\nprint(test_casein_meatmeal)\n\n\n    Exact Wilcoxon rank sum test\n\ndata:  filter(chickwts, feed == \"casein\")[, 1] and filter(chickwts, feed == \"meatmeal\")[, 1]\nW = 94, p-value = 0.09084\nalternative hypothesis: true mu is not equal to 0\n\n\n\n\n\ntest_casein_soybean &lt;- wilcox.exact(\n  x = filter(chickwts, feed=='casein')[,1], \n  y = filter(chickwts, feed=='soybean')[,1], \n  paired = FALSE)\nprint(test_casein_soybean)\n\n\n    Exact Wilcoxon rank sum test\n\ndata:  filter(chickwts, feed == \"casein\")[, 1] and filter(chickwts, feed == \"soybean\")[, 1]\nW = 138, p-value = 0.004283\nalternative hypothesis: true mu is not equal to 0\n\n\n\n\n\ntest_casein_sunflower &lt;- wilcox.exact(\n  x = filter(chickwts, feed=='casein')[,1], \n  y = filter(chickwts, feed=='sunflower')[,1], \n  paired = FALSE)\nprint(test_casein_sunflower)\n\n\n    Exact Wilcoxon rank sum test\n\ndata:  filter(chickwts, feed == \"casein\")[, 1] and filter(chickwts, feed == \"sunflower\")[, 1]\nW = 72.5, p-value = 0.9893\nalternative hypothesis: true mu is not equal to 0\n\n\n\n\n\n検定の結果、p-valueが有意水準0.05以下なのはhorsebean、linseed、soybeanの3つでした。\nしたがって、caseinからこれら３つのグラフに線を引いて、有意差を示していきます。\n\nbar_plot &lt;- bar_plot +\n  geom_signif(\n    comparisons = list(c('casein','horsebean')),\n    y_position = 400, \n    annotation = '***',\n    vjust = 0.7,\n    tip_length = 0.05\n  ) +\n  geom_signif(\n    comparisons = list(c('casein','linseed')),\n    y_position = 440, \n    annotation = '***',\n    vjust = 0.7,\n    tip_length = 0.05\n  ) +\n  geom_signif(\n    comparisons = list(c('casein','soybean')),\n    y_position = 480, \n    annotation = '**',\n    vjust = 0.7,\n    tip_length = 0.05\n  )\nprint(bar_plot)\n\n\n\n\n\n\n\n\n\n\n3-3. 背景・軸・目盛りをカスタムする\n\nbar_plot &lt;- bar_plot +\n  theme(\n    ## テキストの設定\n    plot.title = element_text(size = 13, color=\"black\", hjust = 0.5),\n    axis.title.x = element_blank(),\n    axis.text.x = element_text(size = 10, color=\"black\", angle = 45, hjust = 1),\n    axis.title.y = element_text(size = 12, color=\"black\", hjust = 0.5),\n    axis.text.y = element_text(size = 10, color=\"black\", hjust = 0.5),\n    axis.ticks.x = element_blank(),\n    ## 枠・目盛りの設定\n    legend.title = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.border = element_rect(color='black', fill='transparent', linewidth=0.8),\n    panel.background = element_rect(fill = \"white\",color = NA),\n    aspect.ratio = 1,\n  ) +\n  scale_y_continuous(limits=c(0,530), expand=c(0,0))\nprint(bar_plot)\n\n\n\n\n\n\n\n\nこのように作成したプロットbar_plotは、ggsaveコマンドで画像ファイルとして保存することができます。\nggsave(\n  plot = bar_plot,\n  file = './bar_plot.png',\n  dpi = 300,\n  width = 3.5,\n  height = 3.5\n)\n\n\n\n\n\n トップに戻る"
  },
  {
    "objectID": "contents/list_environment.html",
    "href": "contents/list_environment.html",
    "title": "Cacical",
    "section": "",
    "text": "東京都の気温変化\n\n\n\n\n\n\n\n\n\n\n\n\n\n一致なし\n トップに戻る"
  },
  {
    "objectID": "contents/memo/theme_costom/theme_costom.html",
    "href": "contents/memo/theme_costom/theme_costom.html",
    "title": "ggplot2テーマの自作",
    "section": "",
    "text": "今回は、この棒グラフのテーマを変更していきます。\n\n\n\n\n\n\n\n\n\n\nデフォルトで用意されたテーマ\nggplot2では既にtheme_gray(), theme_bw(), theme_linedraw(), theme_light(), theme_dark(), theme_minimal, theme_classic(), theme_void(), theme_test()の９つのテーマが用意されており、デフォルトでは`theme_bw()が適用されています。\n\nggplot2 Complete Themes\n\n\n\n\n\ntheme_gray\n\n\n\n\n\n\n\n\n\ntheme_bw\n\n\n\n\n\n\n\n\n\ntheme_linedraw\n\n\n\n\n\n\n\n\n\n\n\ntheme_light\n\n\n\n\n\n\n\n\n\ntheme_dark\n\n\n\n\n\n\n\n\n\ntheme_minimal\n\n\n\n\n\n\n\n\n\n\n\ntheme_classic\n\n\n\n\n\n\n\n\n\ntheme_void\n\n\n\n\n\n\n\n\n\ntheme_test\n\n\n\n\n\n\n\n\n\n\n\nテーマの自作\n自作のテーマを作るには、適当な変数に指定したいテーマの要素を書き込むだけです。具体的には下のように、theme()を書き込みます。作成したテーマはデフォルトのテーマと同じように使うことができます。\nあるテーマに別のテーマを重ねることもできます。\ntheme_costom &lt;- theme(\n  # ここに指定しい要素を書き込んでいきます。\n  # axis.line = ...\n)\n\n# いつも通り指定することで適用できます。\nplot &lt;- plot + theme_costom # これでplotにカスタムテーマが適用される。\n\nきまり\n設定するそれぞれの要素には、element_blank()かelement_text()か、element_line()か、element_rect()のいずれかを指定します。その要素をなくしたい場合（何も表示したくない場合）はelement_blank()を指定します。\n\n\n\n\n\n\n\n\n\n削除\nelement_blank()\n\n\n\n\nテキスト\nelement_text()\n・family・face・colour・size・lineheight・hjust・vjust・angle・margin・debug\nフォント書体（plain, italic, bold, bold.italic）文字色文字サイズ行の高さ水平方向の位置（0: 左揃え, 0.5: 中央揃え, 1: 右揃え）垂直方向の位置（0: 下揃え, 0.5: 中央揃え, 1: 上揃え）文字角度マージンデバッグ\n\n\n線\nelement_line()\n・color・linewidth・linetype・lineend\n線の色線の幅線のスタイル（0から6で指定）線末端のスタイル（round, butt, square）\n\n\n四角形\nelement_rect()\n・fill・color・linewidth・linetype\n塗りつぶし色枠線の色枠線の幅枠線のスタイル\n\n\n\n\n\n指定する要素\n非常に長くなり見づらいですが、themeの中には以下のような要素を設定することができます。\ntheme(\n  title,                  # タイトル\n  aspect.ratio,           # 縦横比（1:正方形, 0.5:横:縦=2:1の長方形）\n  axis.title,             # 軸タイトル\n  axis.title.x,           # x軸タイトル\n  axis.title.x.top,\n  axis.title.x.bottom,\n  axis.title.y,           # y軸タイトル\n  axis.title.y.left,\n  axis.title.y.right,\n  axis.text,              # 目盛りのテキスト\n  axis.text.x,\n  axis.text.x.top,\n  axis.text.x.bottom,\n  axis.text.y,\n  axis.text.y.left,\n  axis.text.y.right,\n  axis.text.theta,\n  axis.text.r,\n  axis.ticks,             # 目盛り\n  axis.ticks.x,\n  axis.ticks.x.top,\n  axis.ticks.x.bottom,\n  axis.ticks.y,\n  axis.ticks.y.left,\n  axis.ticks.y.right,\n  axis.ticks.theta,\n  axis.ticks.r,\n  axis.minor.ticks.x.top, \n  axis.minor.ticks.x.bottom,\n  axis.minor.ticks.y.left,\n  axis.minor.ticks.y.right,\n  axis.minor.ticks.theta,\n  axis.minor.ticks.r,\n  axis.ticks.length,\n  axis.ticks.length.x,\n  axis.ticks.length.x.top,\n  axis.ticks.length.x.bottom,\n  axis.ticks.length.y,\n  axis.ticks.length.y.left,\n  axis.ticks.length.y.right,\n  axis.ticks.length.theta,\n  axis.ticks.length.r,\n  axis.minor.ticks.length,\n  axis.minor.ticks.length.x,\n  axis.minor.ticks.length.x.top,\n  axis.minor.ticks.length.x.bottom,\n  axis.minor.ticks.length.y,\n  axis.minor.ticks.length.y.left,\n  axis.minor.ticks.length.y.right,\n  axis.minor.ticks.length.theta,\n  axis.minor.ticks.length.r,\n  axis.line,            # 軸の線\n  axis.line.x,\n  axis.line.x.top,\n  axis.line.x.bottom,\n  axis.line.y,\n  axis.line.y.left,\n  axis.line.y.right,\n  axis.line.theta,\n  axis.line.r,\n  legend.background,     # 凡例の背景\n  legend.margin,\n  legend.spacing,\n  legend.spacing.x,\n  legend.spacing.y,\n  legend.key,\n  legend.key.size,\n  legend.key.height,\n  legend.key.width,\n  legend.key.spacing,\n  legend.key.spacing.x,\n  legend.key.spacing.y,\n  legend.frame,\n  legend.ticks,\n  legend.ticks.length,\n  legend.axis.line,\n  legend.text,\n  legend.text.position,\n  legend.title,\n  legend.title.position,\n  legend.position,\n  legend.position.inside,\n  legend.direction,\n  legend.byrow,\n  legend.justification,\n  legend.justification.top,\n  legend.justification.bottom,\n  legend.justification.left,\n  legend.justification.right,\n  legend.justification.inside,\n  legend.location,\n  legend.box,\n  legend.box.just,\n  legend.box.margin,\n  legend.box.background,\n  legend.box.spacing,\n  panel.background,\n  panel.border,\n  panel.spacing,\n  panel.spacing.x,\n  panel.spacing.y,\n  panel.grid,\n  panel.grid.major,\n  panel.grid.minor,\n  panel.grid.major.x,\n  panel.grid.major.y,\n  panel.grid.minor.x,\n  panel.grid.minor.y,\n  panel.ontop,\n  plot.background,\n  plot.title,\n  plot.title.position,\n  plot.subtitle,\n  plot.caption,\n  plot.caption.position,\n  plot.tag,\n  plot.tag.position,\n  plot.tag.location,\n  plot.margin,\n  strip.background,\n  strip.background.x,\n  strip.background.y,\n  strip.clip,\n  strip.placement,\n  strip.text,\n  strip.text.x,\n  strip.text.x.bottom,\n  strip.text.x.top,\n  strip.text.y,\n  strip.text.y.left,\n  strip.text.y.right,\n  strip.switch.pad.grid,\n  strip.switch.pad.wrap,\n  complete = FALSE,\n  validate = TRUE\n)\n\n\n\n\n\n トップに戻る"
  },
  {
    "objectID": "contents/memo/background/backgroud.html",
    "href": "contents/memo/background/backgroud.html",
    "title": "ggplot2グラフの背景透過",
    "section": "",
    "text": "例として、次のグラフを考えます。\n\n\nコード\n\nlibrary(tidyverse)\n\nplot &lt;- ggplot(Indometh, aes(x=time, y=conc, )) +\n    geom_line(aes(color=Subject), linewidth=1) +\n    geom_point(aes(color=Subject),size=1.5) +\n    theme_bw() +\n    theme(legend.position = \"none\")\nprint(plot)\n\n\n\n\n実行結果\n\n\n\n\n\n\n\n\n\n\n\nここで作成したggplot2のグラフの背景を透過させるためには、theme()内で、panel.backgroundとplot.backgroundの背景を透過させます。\n具体的には、次のようにします。\n\nplot &lt;- plot +\n    theme(\n        panel.background = element_rect(fill = \"transparent\", color = NA),\n        plot.background = element_rect(fill = \"transparent\", color = NA)\n    )\n\nその結果、次のように、グラフの背景が透過されます。\n\n\n\n\n背景透過前\n\n\n\n\n背景透過後\n\n\n\n\n\n実用的には、背景透過のテーマを作っておいて、それを指定するのが便利です。\n\n\n\nmytheme.R\n\ntransparent_theme &lt;- theme(\n    panel.background = element_rect(fill = \"transparent\", color = NA),\n    plot.background = element_rect(fill = \"transparent\", color = NA)\n)\n\n\n\n\n\nplot.R\n\n# 作ったテーマが入っているファイルを読み込んで\nsource('./mytheme.R')\n# plotに足す\nplot &lt;- plot +\n    transparent_theme\n\n\n\n\n\n トップに戻る"
  },
  {
    "objectID": "contents/environment/tokyo_temp/tokyo_temp.html",
    "href": "contents/environment/tokyo_temp/tokyo_temp.html",
    "title": "Cacical",
    "section": "",
    "text": "環境 ggplot2"
  },
  {
    "objectID": "contents/environment/tokyo_temp/tokyo_temp.html#東京都の気温変化",
    "href": "contents/environment/tokyo_temp/tokyo_temp.html#東京都の気温変化",
    "title": "Cacical",
    "section": "東京都の気温変化",
    "text": "東京都の気温変化\n1901年から2025年までの東京都の気温変化をまとめました。\n\n10年ごとの日別平均気温\n\n\n\n\n作成日\n2025-07-23\n\n\nデータ取得日\n2025-07-23\n\n\nデータ元\n気象庁　過去の気象データ・ダウンロード\n\n\n使用したパッケージ\nR, ggplot2, bash\n\n\n\n 画像をダウンロード \n\n\n\n東京都の年平均気温の推移\n1901年から2024年までの東京都の年平均気温の推移です。\n\n\n\n\n作成日\n2025-07-23\n\n\nデータ取得日\n2025-07-23\n\n\nデータ元\n気象庁　過去の気象データ・ダウンロード\n\n\n使用したパッケージ\nR, ggplot2, bash\n\n\n\n\n\n\nRスクリプト\n\n10年ごとの日別平均気温東京都の年平均気温推移\n\n\nsetwd('~/code/graph/temperature')\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(viridis)\nlibrary(scales)\n\ndata &lt;- read.csv('./data/temp_1901to2025.csv', header=F) %&gt;%\n  rename('date'='V1', 'temp'='V2') %&gt;%\n  mutate(ymd = as.Date(date, format='%Y/%m/%d'), year=as.numeric(format(ymd, '%Y')), day=format(ymd, '%m%d')) %&gt;%\n  mutate(period = case_when(\n    year &gt;= 1901 & year &lt;=1910 ~ as.factor('1901-1910'),\n    year &gt;= 1911 & year &lt;=1920 ~ as.factor('1911-1920'),\n    year &gt;= 1921 & year &lt;=1930 ~ as.factor('1921-1930'),\n    year &gt;= 1931 & year &lt;=1940 ~ as.factor('1931-1940'),\n    year &gt;= 1941 & year &lt;=1950 ~ as.factor('1941-1950'),\n    year &gt;= 1951 & year &lt;=1960 ~ as.factor('1951-1960'),\n    year &gt;= 1961 & year &lt;=1970 ~ as.factor('1961-1970'),\n    year &gt;= 1971 & year &lt;=1980 ~ as.factor('1971-1980'),\n    year &gt;= 1981 & year &lt;=1990 ~ as.factor('1981-1990'),\n    year &gt;= 1991 & year &lt;=2000 ~ as.factor('1991-2000'),\n    year &gt;= 2001 & year &lt;=2010 ~ as.factor('2001-2010'),\n    year &gt;= 2011 & year &lt;=2020 ~ as.factor('2011-2020'),\n    year &gt;= 2021 & year &lt;=2030 ~ as.factor('2021-2025')\n    )\n  )\nsumdata &lt;- data %&gt;%\n  select(temp,day,period) %&gt;% \n  group_by(period,day) %&gt;%\n  summarize(meantemp=mean(temp)) %&gt;%\n  mutate(day=as.Date(day, format='%m%d'))\n\ntemp_plot &lt;-\n  ggplot(sumdata, aes(x=day, y=meantemp, group=period, color=period)) +\n  geom_line(aes(x=day, y=meantemp, group=period, color=period))\n\n## 装飾\nlibrary(RColorBrewer)\n#library(extrafont)\n#font_import()\n#loadfonts()\nhight &lt;- -1.3\nannotatesize = 4.5\ntemp_plot &lt;- temp_plot +\n  scale_color_viridis_d(option='H') +\n  annotate(\"text\", x=as.Date(\"2025-01-15\"), y=hight, , hjust=.5, label=\"1月\", family='Noto Sans JP', size=annotatesize) +\n  annotate(\"text\", x=as.Date(\"2025-02-15\"), y=hight, , hjust=.5, label=\"2月\", family='Noto Sans JP', size=annotatesize) +\n  annotate(\"text\", x=as.Date(\"2025-03-15\"), y=hight, , hjust=.5, label=\"3月\", family='Noto Sans JP', size=annotatesize) +\n  annotate(\"text\", x=as.Date(\"2025-04-15\"), y=hight, , hjust=.5, label=\"4月\", family='Noto Sans JP', size=annotatesize) +\n  annotate(\"text\", x=as.Date(\"2025-05-15\"), y=hight, , hjust=.5, label=\"5月\", family='Noto Sans JP', size=annotatesize) +\n  annotate(\"text\", x=as.Date(\"2025-06-15\"), y=hight, , hjust=.5, label=\"6月\", family='Noto Sans JP', size=annotatesize) +\n  annotate(\"text\", x=as.Date(\"2025-07-15\"), y=hight, , hjust=.5, label=\"7月\", family='Noto Sans JP', size=annotatesize) +\n  annotate(\"text\", x=as.Date(\"2025-08-15\"), y=hight, , hjust=.5, label=\"8月\", family='Noto Sans JP', size=annotatesize) +\n  annotate(\"text\", x=as.Date(\"2025-09-15\"), y=hight, , hjust=.5, label=\"9月\", family='Noto Sans JP', size=annotatesize) +\n  annotate(\"text\", x=as.Date(\"2025-10-15\"), y=hight, , hjust=.5, label=\"10月\", family='Noto Sans JP', size=annotatesize) +\n  annotate(\"text\", x=as.Date(\"2025-11-15\"), y=hight, , hjust=.5, label=\"11月\", family='Noto Sans JP', size=annotatesize) +\n  annotate(\"text\", x=as.Date(\"2025-12-15\"), y=hight, , hjust=.5, label=\"12月\", family='Noto Sans JP', size=annotatesize) +\n  scale_x_date(date_breaks = '1 month',\n               #date_labels = \"%b\",\n               expand=c(0.01,0),\n               ) +\n  labs(\n    title = '10年ごとの日別平均気温',\n    subtitle = '1901年から2025年までの日別平均気温を10年ごとにまとめています。',\n    y = expression(paste(\"気温 (\",degree*C,\")\"))\n  ) +\n  scale_y_continuous(limits=c(-2, 31), expand=c(0,0), breaks=c(seq(0,35,5))) +\n\n  theme(\n    ## テキストの設定\n    plot.title = element_text(family = \"sans\", size = 15, color=\"black\", hjust = 0),\n    plot.subtitle = element_text(family = \"sans\", size = 10, color=\"black\", hjust = 0),\n    axis.title.x = element_blank(),\n    axis.title.y = element_text(family = \"sans\", size = 13, color=\"black\", hjust = 0.5),\n    axis.text.x = element_blank(),\n    axis.text.y = element_text(family = \"sans\", size = 12, color=\"black\", hjust = 0.5),\n    axis.ticks.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    ## 枠・目盛りの設定\n    legend.title = element_blank(),\n    panel.grid.major = element_line(color = \"gray90\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_rect(fill = \"white\",color = NA),\n    aspect.ratio=.6\n  )\n\nggsave(file = sprintf(\"./png/temp.png\"), plot=temp_plot, dpi = 600, width = 8, height = 5)\n\n\nsetwd('~/code/graph/temperature')\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(viridis)\nlibrary(scales)\n\ndata &lt;- read.csv('./data/temp_1901to2025.csv', header=F) %&gt;%\n  rename('date'='V1', 'temp'='V2') %&gt;%\n  mutate(ymd = as.Date(date, format='%Y/%m/%d'), year=as.numeric(format(ymd, '%Y')))\n\nsumdata &lt;- data %&gt;%\n  select(temp,year) %&gt;% \n  group_by(year) %&gt;%\n  summarize(meantemp=mean(temp, na.rm = TRUE))\nsumdata &lt;- filter(sumdata,year!='2025')\ntemp_barplot &lt;-\n  ggplot(sumdata, aes(x=year, y=meantemp)) +\n  geom_line(color='grey45') +\n  geom_point(shape=21, color='gray45', fill='white') +\n  geom_smooth(method = \"loess\", se=FALSE, color='black', linewidth=.5, span = .4)\n\n\n## 装飾\ntemp_barplot &lt;- temp_barplot +\n  labs(\n    title = '東京の平均気温推移',\n    subtitle = '1901年から2025年までの東京の年平均気温の推移',\n    y = expression(paste(\"気温 (\",degree*C,\")\"))\n  ) +\n  scale_x_continuous(limits=c(1900,2025), expand=c(0.02,0.02), breaks=c(seq(1900,2050,10)))+\n  scale_y_continuous(limits=c(12.8, 18.2), expand=c(0,0), breaks=c(seq(0,20,1))) +\n  \n  theme(\n    ## テキストの設定\n    plot.title = element_text(family = 'Ubuntu Mono', size = 15, color=\"black\", hjust = 0),\n    plot.subtitle = element_text(family = \"Noto sans JP\", size = 10, color=\"black\", hjust = 0),\n    axis.title.x = element_blank(),\n    axis.title.y = element_text(family = \"Noto sans JP\", size = 12, color=\"black\", hjust = 0.5),\n    axis.text.x = element_text(family = \"Noto sans JP\", size = 10, color=\"black\", angle = 45, hjust = 1),\n    axis.text.y = element_text(family = \"Noto sans JP\", size = 10, color=\"black\", hjust = 0.5),\n    axis.ticks.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    ## 枠・目盛りの設定\n    legend.title = element_blank(),\n    panel.grid.major = element_line(color = \"gray90\", linewidth = 0.3),\n    panel.grid.minor = element_blank(),\n    panel.background = element_rect(fill = \"white\",color = NA),\n    aspect.ratio=.5\n  )\n\n#temp_barplot\nggsave(file = sprintf(\"./png/temp_barplot_jp.png\"), plot=temp_barplot, dpi = 600, width = 7, height = 5)\n#library(png)\n#img &lt;- readPNG('./png/temp_barplot.png')\n#grid::grid.raster(img)\n\ntemp_barplot_en &lt;- temp_barplot +\n  labs(\n    title = 'Annual average temperature trends in Tokyo',\n    subtitle = 'Changes in Tokyo\\'s average annual temperature from 1901 to 2025',\n    y = expression(paste(\"Temperature (\",degree*C,\")\"))\n  ) +\n  scale_x_continuous(limits=c(1900,2025), expand=c(0.02,0.02), breaks=c(seq(1900,2050,10)))+\n  scale_y_continuous(limits=c(12.8, 18.2), expand=c(0,0), breaks=c(seq(0,20,1))) +\n  \n  theme(\n    ## テキストの設定\n    plot.title = element_text(family = 'Ubuntu Mono', size = 15, color=\"black\", hjust = 0),\n    plot.subtitle = element_text(family = \"Ubuntu Mono\", size = 10, color=\"black\", hjust = 0),\n    axis.title.x = element_blank(),\n    axis.title.y = element_text(family = \"Ubuntu Mono\", size = 12, color=\"black\", hjust = 0.5),\n    axis.text.x = element_text(family = \"Ubuntu Mono\", size = 10, color=\"black\", angle = 45, hjust = 1),\n    axis.text.y = element_text(family = \"Ubuntu Mono\", size = 10, color=\"black\", hjust = 0.5),\n    axis.ticks.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    ## 枠・目盛りの設定\n    legend.title = element_blank(),\n    panel.grid.major = element_line(color = \"gray90\", linewidth = 0.3),\n    panel.grid.minor = element_blank(),\n    panel.background = element_rect(fill = \"white\",color = NA),\n    aspect.ratio=.5\n  )\nggsave(file = sprintf(\"./png/temp_barplot_en.png\"), plot=temp_barplot_en, dpi = 600, width = 7, height = 5)"
  },
  {
    "objectID": "contents/list_society.html",
    "href": "contents/list_society.html",
    "title": "Society",
    "section": "",
    "text": "Society\n\n\n\n\n\n\n\n\n\n\n\n\n\n地図で探す「2025ハロウィーンイベント🎃」\n\n\n全国のハロウィーンイベントを地図から探すことができます。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nライブラリの読み込み\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n高齢者割合マップ\n\n\n\n\n\n\n\n\n\n\n\n\n\n一致なし\n トップに戻る"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cacical",
    "section": "",
    "text": "ゴ\n        リ\n        に\n        っ\n        き\n    \n\n\n    Rやggplot2に関する備忘録と作成したグラフ置き場。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n    \n    \n      並び替え\n      デフォルト\n      \n        日付 - 日付（昇順）\n      \n      \n        日付 - 日付（降順）\n      \n    \n  \n\n\n\n\n\n\n\n\n\n\nggplot2を用いた棒グラフの作成\n\n\nエラーバーや有意差の有無を表示した棒グラフを作成します。検定やデータの整形も同時に行います。\n\n\n\n\n\n2025/08/08\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2グラフの背景透過\n\n\nggplot2で作成したグラフの背景を、themeをいじることで透過させます。\n\n\n\n\n\n2025/08/12\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2テーマの自作\n\n\nggplot2で作成するグラフのテーマを自作する。（執筆途中）\n\n\n\n\n\n2025/08/10\n\n\n\n\n\n一致なし\n トップに戻る"
  }
]